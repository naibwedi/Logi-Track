@model logirack.Models.DashboardStats

@{
ViewData["Title"] = "Admin Dashboard";
}

<h1 class="mb-4">Admin Dashboard</h1>

<section class="trip-status-overview">
    <h2>Trip Status Overview</h2>
    <div class="status-cards">
        <div class="status-card">
            <h3>Active Trips</h3>
            <p id="active-trips">@Model.ActiveTrips</p>
            <div class="trend positive">↑ Active</div>
        </div>
        <div class="status-card">
            <h3>Assigned Trips</h3>
            <p id="assigned-trips">@(Model.RecentActivities.Count(a => a.ActivityType == "Assigned"))</p>
            <div class="trend neutral">→ In Progress</div>
        </div>
        <div class="status-card">
            <h3>Completed Trips</h3>
            <p id="completed-trips">@Model.CompletedTrips</p>
            <div class="trend positive">↑ Complete</div>
        </div>
        <div class="status-card">
            <h3>Available Drivers</h3>
            <p id="available-drivers">@Model.AvailableDrivers</p>
            <div class="trend @(Model.AvailableDrivers > 0 ? "positive" : "negative")">
                @(Model.AvailableDrivers > 0 ? "↑" : "↓") Available
            </div>
        </div>
    </div>
</section>

<section class="recent-activities">
    <h2>Recent Trip Activities</h2>
    <div id="recent-activities" class="activities-list">
        @foreach (var activity in Model.RecentActivities.OrderByDescending(a => a.Timestamp))
        {
        <div class="activity-item">
            <span class="activity-time">@activity.Timestamp.ToLocalTime().ToShortTimeString()</span>
            <span class="activity-badge @activity.ActivityType.ToLower()">@activity.ActivityType</span>
            <span class="activity-text">@activity.Description</span>
        </div>
        }
    </div>
</section>

<section class="add-new-trip">
    <h2>Create New Trip</h2>
    <form asp-action="AddNewTripByAdmin" asp-controller="Admin" method="post">
        <div class="form-row">
            <div class="form-group">
                <label for="CustomerId">Select Customer</label>
                <select id="CustomerId" name="CustomerId" class="form-select" required>
                    @foreach (var customer in Model.Customers)
                    {
                    <option value="@customer.Id">@($"{customer.FirstName} {customer.LastName}")</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="DriverId">Assign Driver</label>
                <select id="DriverId" name="DriverId" class="form-select" required>
                    @foreach (var driver in Model.AvailableDriversList)
                    {
                    <option value="@driver.Id">@($"{driver.FirstName} {driver.LastName}")</option>
                    }
                </select>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="FromCity">From City</label>
                <input type="text" id="FromCity" name="FromCity" required />
            </div>
            <div class="form-group">
                <label for="ToCity">To City</label>
                <input type="text" id="ToCity" name="ToCity" required />
            </div>
            <div class="form-group">
                <label for="Distance">Distance (km)</label>
                <input type="number" id="Distance" name="Distance" step="0.1" required />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="Weight">Weight (kg)</label>
                <input type="number" id="Weight" name="Weight" step="0.1" required />
            </div>
            <div class="form-group">
                <label for="Price">Price</label>
                <input type="number" id="Price" name="Price" step="0.01" required />
            </div>
            <div class="form-group">
                <label for="PickUpTime">Pickup Time</label>
                <input type="datetime-local" id="PickUpTime" name="PickUpTime" required />
            </div>
        </div>

        <button type="submit" class="btn-primary">Create Trip</button>
    </form>
</section>

<section class="manage-drivers">
    <h2>Active Drivers</h2>
    <div class="drivers-grid">
        @foreach (var driver in Model.RecentActivities.Where(a => a.ActivityType == "Driver").Take(4))
        {
        <div class="driver-card">
            <img src="~/images/profile-user.png" alt="Driver" />
            <h3>@driver.Description</h3>
            <div class="driver-status @(driver.ActivityType == "Active" ? "active" : "inactive")">
                @driver.ActivityType
            </div>
        </div>
        }
    </div>
</section>

<section class="financial-overview">
    <h2>Trip Revenue Overview</h2>
    <div class="financial-stats">
        <div class="revenue-comparison">
            <canvas id="tripRevenueChart"></canvas>
        </div>
        <div class="financial-details">
            <div class="detail">
                <h3>Total Revenue</h3>
                <p id="total-revenue">@Model.TotalRevenue.ToString("C")</p>
            </div>
            <div class="detail">
                <h3>Pending Payments</h3>
                <p id="pending-approvals">@Model.PendingApprovals.ToString("C")</p>
            </div>
            <div class="detail">
                <h3>Completed Trips Revenue</h3>
                <p id="completed-revenue">@((Model.TotalRevenue - Model.PendingApprovals).ToString("C"))</p>
            </div>
        </div>
    </div>
</section>

<div class="toast-container position-fixed bottom-0 end-0 p-3"></div>

@section Scripts {
<script src="~/js/signalR.js"></script>
<script>
    const tripRevenueChart = new Chart(
        document.getElementById('tripRevenueChart').getContext('2d'),
        {
            type: 'line',
            data: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                datasets: [{
                    label: 'Trip Revenue',
                    data: [@Model.TotalRevenue],
                    borderColor: '#007bff',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        }
    );
</script>
}